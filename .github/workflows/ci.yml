name: CI

on:
  pull_request:
  push:
    branches:
      - "staging"
      - "main"

env:
  CARGO_INCREMENTAL: 0
  CARGO_TERM_COLOR: always

jobs:
  formatting:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dprint/check@v2.1

  lint-commits:
    runs-on: ubuntu-latest
    if: github.event.ref != 'refs/heads/main'

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Get all commits on current main
        run: git fetch origin main
      - name: Log all commits we will analyze
        run: git log --pretty=format:%s origin/main..HEAD
      - name: Disallow fixup! commits
        run: git log --pretty=format:%s origin/main..HEAD | grep -zv fixup!
      - name: Disallow squash! commits
        run: git log --pretty=format:%s origin/main..HEAD | grep -zv squash!

  # job to run change detection
  changes:
    runs-on: ubuntu-latest
    # Set job outputs to values from filter step
    outputs:
      ln-dlc-node: ${{ steps.filter.outputs.ln-dlc-node }}
    steps:
      - uses: actions/checkout@v3
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          filters: |
            ln-dlc-node:
              - '.github/workflows/**'
              - 'crates/bdk-ldk/**'
              - 'crates/ln-dlc-node/**'
              - 'Cargo.*'
            flutter:
              - '.github/workflows/**'
              - 'mobile/android/**'
              - 'mobile/ios/**'
              - 'mobile/lib/**'
              - 'mobile/linux/**'
              - 'mobile/macos/**'
              - 'mobile/native/**'
              - 'mobile/test/**'
              - 'mobile/windows/**'
              - 'mobile/pubspec.*'

  clippy:
    runs-on: ubuntu-latest
    needs: formatting
    steps:
      - uses: actions/checkout@v3
      - uses: extractions/setup-just@v1
      - name: Setup rust toolchain
        run: rustup show
      - uses: Swatinem/rust-cache@v2.2.0
      - uses: subosito/flutter-action@v2
        with:
          channel: "stable"
      - name: Install FFI bindings
        uses: baptiste0928/cargo-install@v1
        with:
          crate: flutter_rust_bridge_codegen
          version: "1.62.1"
      - name: Generate FFI bindings
        run: just gen
      - run: cargo clippy --all-targets --all-features -- -D warnings

  lint-flutter:
    needs: changes
    if: ${{ needs.changes.outputs.flutter == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: extractions/setup-just@v1
      - uses: subosito/flutter-action@v2
        with:
          channel: "stable"
      - name: Setup rust toolchain
        run: rustup show
      - name: Install FFI bindings
        run: cargo install flutter_rust_bridge_codegen
      - name: Generate FFI bindings
        run: just gen
      - name: Verify flutter formatting
        # Mocks are actually ignored by the linter because they include `// ignore_for_file: type=lint`, but `dart format` reports changes on them nonetheless.
        # The solution using a `find` command is from here: https://github.com/dart-lang/dart_style/issues/864
        run: dart format --output=none --set-exit-if-changed --line-length 100 $(find . -name "*.dart" -not \( -name "*.*freezed.dart" -o -name "*.mocks.dart"  \) )
      - name: Analyze flutter code
        run: flutter analyze --fatal-infos

  tests:
    runs-on: ubuntu-latest
    needs: clippy
    steps:
      - uses: actions/checkout@v3
      - uses: extractions/setup-just@v1
      - name: Setup rust toolchain
        run: rustup show
      - uses: Swatinem/rust-cache@v2.2.0
      - uses: subosito/flutter-action@v2
        with:
          channel: "stable"
      - name: Install FFI bindings
        uses: baptiste0928/cargo-install@v1
        with:
          crate: flutter_rust_bridge_codegen
          version: "1.63.1"
      - name: Generate FFI bindings
        run: just gen
      - name: Running cargo tests
        run: cargo test
      - name: Running flutter tests
        run: just flutter-test
